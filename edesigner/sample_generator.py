# -*- coding: utf-8 -*-
# sample_generator
# Jose Alfredo Martin 2020

version = 'sample_generator.v.9.0.0'

# Python modules
import os
import argparse
# External modules
import pandas as pd
# Local modules
from classes.logger import Logger
from classes.sample_enumerator import SampleEnumerator


if __name__ == '__main__':
    # Arg parser
    parser = argparse.ArgumentParser(description="""sample generator takes as input a series of bb files (that
    could have been generated by e_bb_retreaver) and a series of smirks reactions and generates a csv file with
    smiles form randomly selected molecules from the library. The user must speficy the sample size and 
    how many different samples (drawn from different random series) are to be generated). The user can also add
    simple properties generated by rdkit (na, clogp, tpsa, rb, fsp3) to the csv file""")
    parser.add_argument('-wf', '--wfolder',
                        help='Working Folder: where the input files are located and generated files are written',
                        type=str, default='./')
    parser.add_argument('-nc', '--n_cycles',
                        help='number of cycles in the library', type=int, default=2)
    parser.add_argument('-hp', '--headpiece', help='smarts string representing the headpiece',
                        type=str, default=None)
    parser.add_argument('-d1', '--deprotection1', help='smirks pattern for the deprotection used in cycle 1',
                        type=str, default=None)
    parser.add_argument('-r1', '--reaction1', help='smirks pattern for the reaction used in cycle 1',
                        type=str, default=None)
    parser.add_argument('-b1', '--bbs1', help='csv file containing the bbs for cycle 1 (relative to wfolder)',
                        type=str, default=None)
    parser.add_argument('-d2', '--deprotection2', help='smirks pattern for the deprotection used in cycle 2',
                        type=str, default=None)
    parser.add_argument('-r2', '--reaction2', help='smirks pattern for the reaction used in cycle 2',
                        type=str, default=None)
    parser.add_argument('-b2', '--bbs2', help='csv file containing the bbs for cycle 2',
                        type=str, default=None)
    parser.add_argument('-d3', '--deprotection3', help='smirks pattern for the deprotection used in cycle 3',
                        type=str, default=None)
    parser.add_argument('-r3', '--reaction3', help='smirks pattern for the reaction used in cycle 3',
                        type=str, default=None)
    parser.add_argument('-b3', '--bbs3', help='csv file containing the bbs for cycle 3',
                        type=str, default=None)
    parser.add_argument('-ns', '--number_samples',
                        help='number of samples generated for each random series (if more than one series separate with comma)',
                        type=str, default='1000')
    parser.add_argument('-nr', '--number_sets',
                        help='number of random series to generate samples', type=int,
                        default=1)
    parser.add_argument('-of', '--output_file', help='filename for the output file (relative to wfolder)', type=str,
                        default='samples.csv')
    parser.add_argument('-v', '--verbose', help='whether to print progress in screen',
                        action='store_true')

    args = parser.parse_args()
    args.wfolder = os.path.abspath(args.wfolder)
    args.number_samples = args.number_samples.strip(' ').split(',')
    args.number_samples = [int(item) for item in args.number_samples]
    
    # Initialization
    args.wfolder = os.path.abspath(args.wfolder)
    log = Logger(os.path.join(args.wfolder, 'sample_generator.log'))
    log.update(version)
    log.update('initiallization...', to_screen=args.verbose)
    reactions = [args.reaction1]
    deprotections = [args.deprotection1]
    dfbbs1 = pd.read_csv(os.path.join(args.wfolder, args.bbs1))
    bbs = [dfbbs1.smiles.tolist()]
    if args.n_cycles > 1:
        reactions.append(args.reaction2)
        deprotections.append(args.deprotection2)
        dfbbs2 = pd.read_csv(os.path.join(args.wfolder, args.bbs2))
        bbs.append(dfbbs2.smiles.tolist())
    if args.n_cycles > 2:
        reactions.append(args.reaction3)
        deprotections.append(args.deprotection3)
        dfbbs3 = pd.read_csv(os.path.join(args.wfolder, args.bbs3))
        bbs.append(dfbbs2.smiles.tolist())
    log.update('creating enumerator instance...', to_screen=args.verbose)
    enumerator = SampleEnumerator(n_cycles=args.n_cycles,
                                  reactions=reactions,
                                  deprotections=deprotections)

    log.update('enumerating samples...', to_screen=args.verbose)
    all_dfs = []
    for i, item in enumerate(args.number_samples):
        log.update(f'enumerating set {i}')
        df = enumerator.enumerate_sets(args.headpiece,
                                       bbs,
                                       n_sets=args.number_sets,
                                       n_samples=item,
                                       props=True)
        df['set'] = df['set'] + args.number_sets * i
        all_dfs.append(df)
    df = pd.concat(all_dfs)
    log.update('writting results to disk...', to_screen=args.verbose)
    df.to_csv(os.path.join(args.wfolder, args.output_file), index=False)

    log.update('OK')
